{
    // ${1/(.*)/${1:/downcase}/}
    // ${1:model}
    // "Test a model": {
    //     "scope": "rust",
    //     "prefix": "model_test",
    //     "body": [
    //         "#[cfg(test)]",
    //         "mod test {",
    //         "    use super::${1:model};",
    //         "    use crate::worldstate::{client::Client, error::ApiError};",
    //         "",
    //         "    #[tokio::test]",
    //         "    async fn test_${1/(.*)/${1:/downcase}/}() -> Result<(), ApiError> {",
    //         "        let client = Client::new();",
    //         "",
    //         "        match client.fetch::<${1:model}>().await {",
    //         "            Ok(_${1/(.*)/${1:/downcase}/}) => Ok(()),",
    //         "            Err(why) => Err(why),",
    //         "        }",
    //         "    }",
    //         "",
    //         "    #[tokio::test]",
    //         "    async fn test_${1/(.*)/${1:/downcase}/}_ml() -> Result<(), ApiError> {",
    //         "        use crate::worldstate::prelude::Language;",
    //         "",
    //         "        let client = Client::new();",
    //         "",
    //         "        match client.fetch_using_lang::<${1:model}>(Language::ZH).await {",
    //         "            Ok(_${1/(.*)/${1:/downcase}/}) => Ok(()),",
    //         "            Err(why) => Err(why),",
    //         "        }",
    //         "    }",
    //         "}",
    //     ]
    // },
    "Test a model": {
        "scope": "rust",
        "prefix": "model_test",
        "body": [
            "#[cfg(test)]",
            "mod test_${1/(.*)/${1:/downcase}/} {",
            "    use rstest::rstest;",
            "    use serde_json::from_str;",
            "",
            "    use super::${1:model};",
            "    use crate::{",
            "        worldstate::{",
            "            fixtures::${1/(.*)/${1:/downcase}/}::{",
            "               ${1/(.*)/${1:/downcase}/},",
            "               ${1/(.*)/${1:/downcase}/}_en,",
            "            },",
            "            models::Queryable,",
            "        },",
            "    };",
            "",
            "    type R = <${1:model} as Queryable>::Return;",
            "",
            "    #[rstest]",
            "    fn test(${1/(.*)/${1:/downcase}/}_en: &str) {",
            "        from_str::<R>(${1/(.*)/${1:/downcase}/}_en).unwrap();",
            "    }",
            "",
            "    #[rstest]",
            "    fn test_ml(${1/(.*)/${1:/downcase}/}: &str) {",
            "        from_str::<R>(${1/(.*)/${1:/downcase}/}).unwrap();",
            "    }",
            "}",
        ]
    },
}